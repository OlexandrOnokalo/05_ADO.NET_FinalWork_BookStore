// <auto-generated />
using System;
using BookStoreDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStoreDataAccess.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20250930171547_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStoreDataAccess.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "George R. R. Martin"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "J. K. Rowling"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Isaac Asimov"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Stephen King"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Agatha Christie"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Ernest Hemingway"
                        });
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int?>("ParentBookId")
                        .HasColumnType("int");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ParentBookId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Title");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = 1,
                            CostPrice = 8.50m,
                            GenreId = 4,
                            IsActive = true,
                            Pages = 694,
                            PublisherId = 1,
                            SalePrice = 19.99m,
                            Stock = 10,
                            Title = "A Game of Thrones",
                            Year = 1996
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = 2,
                            CostPrice = 5.00m,
                            GenreId = 4,
                            IsActive = true,
                            Pages = 309,
                            PublisherId = 2,
                            SalePrice = 12.99m,
                            Stock = 15,
                            Title = "Harry Potter and the Sorcerer's Stone",
                            Year = 1997
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = 3,
                            CostPrice = 4.00m,
                            GenreId = 3,
                            IsActive = true,
                            Pages = 255,
                            PublisherId = 3,
                            SalePrice = 9.99m,
                            Stock = 8,
                            Title = "Foundation",
                            Year = 1951
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = 4,
                            CostPrice = 6.00m,
                            GenreId = 6,
                            IsActive = true,
                            Pages = 447,
                            PublisherId = 4,
                            SalePrice = 14.99m,
                            Stock = 5,
                            Title = "The Shining",
                            Year = 1977
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = 5,
                            CostPrice = 3.50m,
                            GenreId = 6,
                            IsActive = true,
                            Pages = 256,
                            PublisherId = 1,
                            SalePrice = 8.99m,
                            Stock = 7,
                            Title = "Murder on the Orient Express",
                            Year = 1934
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2024, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = 6,
                            CostPrice = 2.00m,
                            GenreId = 1,
                            IsActive = true,
                            Pages = 127,
                            PublisherId = 2,
                            SalePrice = 6.99m,
                            Stock = 4,
                            Title = "The Old Man and the Sea",
                            Year = 1952
                        });
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.BookPromotion", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("BookPromotions");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSpent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Education"
                        });
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 3,
                            Country = "UK",
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 4,
                            Country = "France",
                            Name = "Hachette Livre"
                        });
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Reserved");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Date");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.WriteOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("WriteOffs");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Book", b =>
                {
                    b.HasOne("BookStoreDataAccess.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookStoreDataAccess.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookStoreDataAccess.Entities.Book", "ParentBook")
                        .WithMany("Continuations")
                        .HasForeignKey("ParentBookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookStoreDataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("ParentBook");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.BookPromotion", b =>
                {
                    b.HasOne("BookStoreDataAccess.Entities.Book", "Book")
                        .WithMany("BookPromotions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreDataAccess.Entities.Promotion", "Promotion")
                        .WithMany("BookPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Promotion", b =>
                {
                    b.HasOne("BookStoreDataAccess.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Reservation", b =>
                {
                    b.HasOne("BookStoreDataAccess.Entities.Book", "Book")
                        .WithMany("Reservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreDataAccess.Entities.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Sale", b =>
                {
                    b.HasOne("BookStoreDataAccess.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.SaleItem", b =>
                {
                    b.HasOne("BookStoreDataAccess.Entities.Book", "Book")
                        .WithMany("SaleItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookStoreDataAccess.Entities.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.WriteOff", b =>
                {
                    b.HasOne("BookStoreDataAccess.Entities.Book", "Book")
                        .WithMany("WriteOffs")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Book", b =>
                {
                    b.Navigation("BookPromotions");

                    b.Navigation("Continuations");

                    b.Navigation("Reservations");

                    b.Navigation("SaleItems");

                    b.Navigation("WriteOffs");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Customer", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Promotion", b =>
                {
                    b.Navigation("BookPromotions");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreDataAccess.Entities.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
